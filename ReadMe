## TASK 1

# AdacaProduct.API
 - Handles API Request in and out from frontend to Backend.
 - Dependency Injection using AddScope and also Added Memory Cache to demonstrate the Caching
# AdacaProduct.Model 
    - AppDBContext
        - A class in an Entity Framework Core-based application. It serves as the primary class responsible for interacting with the database. 
    - ApiResponse
        - A object for response handling having a message , data and also a status for error handling

# AdacaProduct.Service
    - Added IMemoryCache to allow the data stays in memory for the stated time 

# Instructions
    - Add database name ProductDb
    - run dotnet ef database update
    - you're good to go

## Task 2

 # Part A (SQL Server)

    SELECT TOP 5 
        c.CustomerName,
        COUNT(o.OrderId) AS TotalOrders,
        SUM(o.TotalAmount) AS TotalAmount
    FROM 
        Customers c
    JOIN 
        Orders o ON c.CustomerId = o.CustomerId
    WHERE 
        o.OrderDate >= DATEADD(MONTH, -6, GETDATE())
    GROUP BY 
        c.CustomerName
    ORDER BY 
        TotalOrders DESC, TotalAmount DESC;

    - TOP 5: Limits the result to the top 5 rows. 
    - COUNT(o.OrderId) AS TotalOrders: Counts the number of orders placed by each customer, labeled as TotalOrders.
    - SUM(o.TotalAmount) AS TotalAmount: Calculates the total monetary value of all orders for each customer, labeled as TotalAmount.
    - o.OrderDate >= DATEADD(MONTH, -6, GETDATE()) : Filter the date in the last 6 months

 # Part B (Postgre SQL)

    UPDATE 
        Products
    SET Price = Price * 1.10
    WHERE CategoryId = (
        SELECT CategoryId
        FROM Categories
        WHERE Name = 'Electronics'
    );

    - SET Price = Price * 1.10 : This updates the Price column for the selected rows. The new price is calculated by multiplying the current price by 1.10, effectively increasing it by 10%.
    - WHERE CategoryId = ( SELECT CategoryId FROM Categories WHERE Name = 'Electronics') : retrieves the CategoryId of the "Electronics" category from the Categories table.

## TASK 3

1. Designing a Database Schema for Multi-Database Support (SQL Server + PostgreSQL)
 - Using Entity Framework lessen or avoid the risk interms to support both SQL and PostgreSQL
 - Use code first instead of database first to define first the properties and let the dotnet generate correct database schema or column datatype 
2. What strategies would you use to optimize SQL queries for performance in a large-scale .NET application? 
 - Avoid * function just retrieve or state only needed columns
 - Avoid joining tables that are not needed 
 - Using Memory Cache 
3. Describe your approach to implementing a caching layer for the Product API to improve performance.  
 - In my scenario on my Product service, It will check first if the cache contains using _cache.TryGetValue(_cacheKey, out List<Product> products)
if the cache is missing or expired it will query all the products from the database using _context.Products.ToList() and also I set a expiration for 5 mins using .SetSlidingExpiration(TimeSpan.FromMinutes(5)
